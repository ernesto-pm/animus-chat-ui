// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type OptionsLegacyParser } from '@hey-api/client-axios';
import type { LoginUserData, LoginUserError, LoginUserResponse, SignupNormieUserData, SignupNormieUserError, SignupNormieUserResponse, SignupAdminUserData, SignupAdminUserError, SignupAdminUserResponse, GetAllUsersError, GetAllUsersResponse, GetUserByEmailData, GetUserByEmailError, GetUserByEmailResponse, GetUserByIdData, GetUserByIdError, GetUserByIdResponse, CreatePersonaData, CreatePersonaError, CreatePersonaResponse, GetPersonasForUserData, GetPersonasForUserError, GetPersonasForUserResponse, GetPublicSystemMessagesError, GetPublicSystemMessagesResponse, GetSystemMessagesForUserData, GetSystemMessagesForUserError, GetSystemMessagesForUserResponse, CreateSystemMessageData, CreateSystemMessageError, CreateSystemMessageResponse, CreateCharacterData, CreateCharacterError, CreateCharacterResponse, GetCharactersForUserData, GetCharactersForUserError, GetCharactersForUserResponse, ChatPredictData, ChatPredictError, ChatPredictResponse, OllamaDetailedChatPredictData, OllamaDetailedChatPredictError, OllamaDetailedChatPredictResponse, CreateScenarioData, CreateScenarioError, CreateScenarioResponse, GetScenariosForUserData, GetScenariosForUserError, GetScenariosForUserResponse, GetChatData, GetChatError, GetChatResponse, CreateChatData, CreateChatError, CreateChatResponse2, GetChatsForUserData, GetChatsForUserError, GetChatsForUserResponse, GetChatGenerationSettingsData, GetChatGenerationSettingsError, GetChatGenerationSettingsResponse, UpdateChatGenerationSettingsData, UpdateChatGenerationSettingsError, UpdateChatGenerationSettingsResponse, GetChatUiSettingsData, GetChatUiSettingsError, GetChatUiSettingsResponse, UpdateChatUiSettingsData, UpdateChatUiSettingsError, UpdateChatUiSettingsResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * Login User
 */
export const loginUser = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<LoginUserData, ThrowOnError>) => {
    return (options?.client ?? client).post<LoginUserResponse, LoginUserError, ThrowOnError>({
        ...options,
        url: '/users/login'
    });
};

/**
 * Signup Normie User
 */
export const signupNormieUser = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<SignupNormieUserData, ThrowOnError>) => {
    return (options?.client ?? client).post<SignupNormieUserResponse, SignupNormieUserError, ThrowOnError>({
        ...options,
        url: '/users/signup/normie'
    });
};

/**
 * Signup Admin User
 */
export const signupAdminUser = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<SignupAdminUserData, ThrowOnError>) => {
    return (options?.client ?? client).post<SignupAdminUserResponse, SignupAdminUserError, ThrowOnError>({
        ...options,
        url: '/users/signup/admin'
    });
};

/**
 * Get All Users
 */
export const getAllUsers = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllUsersResponse, GetAllUsersError, ThrowOnError>({
        ...options,
        url: '/users/'
    });
};

/**
 * Get User By Email
 */
export const getUserByEmail = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetUserByEmailData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetUserByEmailResponse, GetUserByEmailError, ThrowOnError>({
        ...options,
        url: '/users/email/{email}'
    });
};

/**
 * Get User By Id
 */
export const getUserById = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetUserByIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetUserByIdResponse, GetUserByIdError, ThrowOnError>({
        ...options,
        url: '/users/email/{id}'
    });
};

/**
 * Create Persona
 */
export const createPersona = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CreatePersonaData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreatePersonaResponse, CreatePersonaError, ThrowOnError>({
        ...options,
        url: '/personas/'
    });
};

/**
 * Get Personas For User
 */
export const getPersonasForUser = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetPersonasForUserData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetPersonasForUserResponse, GetPersonasForUserError, ThrowOnError>({
        ...options,
        url: '/personas/for-user/{user_id}'
    });
};

/**
 * Get Public System Messages
 */
export const getPublicSystemMessages = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetPublicSystemMessagesResponse, GetPublicSystemMessagesError, ThrowOnError>({
        ...options,
        url: '/system-messages/public'
    });
};

/**
 * Get System Messages For User
 */
export const getSystemMessagesForUser = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetSystemMessagesForUserData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetSystemMessagesForUserResponse, GetSystemMessagesForUserError, ThrowOnError>({
        ...options,
        url: '/system-messages/for-user/{user_id}'
    });
};

/**
 * Create System Message
 */
export const createSystemMessage = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CreateSystemMessageData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateSystemMessageResponse, CreateSystemMessageError, ThrowOnError>({
        ...options,
        url: '/system-messages/'
    });
};

/**
 * Create Character
 */
export const createCharacter = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CreateCharacterData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateCharacterResponse, CreateCharacterError, ThrowOnError>({
        ...options,
        url: '/characters/'
    });
};

/**
 * Get Characters For User
 */
export const getCharactersForUser = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetCharactersForUserData, ThrowOnError>) => {
    return (options?.client ?? client).post<GetCharactersForUserResponse, GetCharactersForUserError, ThrowOnError>({
        ...options,
        url: '/characters/for-user/{user_id}'
    });
};

/**
 * Chat Predict
 */
export const chatPredict = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ChatPredictData, ThrowOnError>) => {
    return (options?.client ?? client).post<ChatPredictResponse, ChatPredictError, ThrowOnError>({
        ...options,
        url: '/ollama/chat-predict'
    });
};

/**
 * Ollama Detailed Chat Predict
 */
export const ollamaDetailedChatPredict = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<OllamaDetailedChatPredictData, ThrowOnError>) => {
    return (options?.client ?? client).post<OllamaDetailedChatPredictResponse, OllamaDetailedChatPredictError, ThrowOnError>({
        ...options,
        url: '/ollama/detailed-chat-predict'
    });
};

/**
 * Create Scenario
 */
export const createScenario = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CreateScenarioData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateScenarioResponse, CreateScenarioError, ThrowOnError>({
        ...options,
        url: '/scenarios/'
    });
};

/**
 * Get Scenarios For User
 */
export const getScenariosForUser = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetScenariosForUserData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetScenariosForUserResponse, GetScenariosForUserError, ThrowOnError>({
        ...options,
        url: '/scenarios/for-user/{user_id}'
    });
};

/**
 * Get Chat
 */
export const getChat = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetChatData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetChatResponse, GetChatError, ThrowOnError>({
        ...options,
        url: '/chats/expanded-info/{chat_id}'
    });
};

/**
 * Create Chat
 */
export const createChat = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CreateChatData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateChatResponse2, CreateChatError, ThrowOnError>({
        ...options,
        url: '/chats/'
    });
};

/**
 * Get Chats For User
 */
export const getChatsForUser = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetChatsForUserData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetChatsForUserResponse, GetChatsForUserError, ThrowOnError>({
        ...options,
        url: '/chats/for-user/{user_id}'
    });
};

/**
 * Get Chat Generation Settings
 */
export const getChatGenerationSettings = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetChatGenerationSettingsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetChatGenerationSettingsResponse, GetChatGenerationSettingsError, ThrowOnError>({
        ...options,
        url: '/chats/{chat_id}/generation-settings'
    });
};

/**
 * Update Chat Generation Settings
 */
export const updateChatGenerationSettings = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpdateChatGenerationSettingsData, ThrowOnError>) => {
    return (options?.client ?? client).put<UpdateChatGenerationSettingsResponse, UpdateChatGenerationSettingsError, ThrowOnError>({
        ...options,
        url: '/chats/{chat_id}/generation-settings'
    });
};

/**
 * Get Chat Ui Settings
 */
export const getChatUiSettings = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetChatUiSettingsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetChatUiSettingsResponse, GetChatUiSettingsError, ThrowOnError>({
        ...options,
        url: '/chats/{chat_id}/ui-settings'
    });
};

/**
 * Update Chat Ui Settings
 */
export const updateChatUiSettings = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpdateChatUiSettingsData, ThrowOnError>) => {
    return (options?.client ?? client).put<UpdateChatUiSettingsResponse, UpdateChatUiSettingsError, ThrowOnError>({
        ...options,
        url: '/chats/{chat_id}/ui-settings'
    });
};